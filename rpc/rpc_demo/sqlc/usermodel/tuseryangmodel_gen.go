// Code generated by goctl. DO NOT EDIT.

package usermodel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tUserYangFieldNames          = builder.RawFieldNames(&TUserYang{})
	tUserYangRows                = strings.Join(tUserYangFieldNames, ",")
	tUserYangRowsExpectAutoSet   = strings.Join(stringx.Remove(tUserYangFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tUserYangRowsWithPlaceHolder = strings.Join(stringx.Remove(tUserYangFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tUserYangModel interface {
		Insert(ctx context.Context, data *TUserYang) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TUserYang, error)
		Update(ctx context.Context, data *TUserYang) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTUserYangModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TUserYang struct {
		Id       int64          `db:"id"`
		Username sql.NullString `db:"username"`
		Password sql.NullString `db:"password"`
		Remark   sql.NullString `db:"remak"`
	}
)

func newTUserYangModel(conn sqlx.SqlConn) *defaultTUserYangModel {
	return &defaultTUserYangModel{
		conn:  conn,
		table: "`t_user_yang`",
	}
}

func (m *defaultTUserYangModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTUserYangModel) FindOne(ctx context.Context, id int64) (*TUserYang, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tUserYangRows, m.table)
	var resp TUserYang
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTUserYangModel) Insert(ctx context.Context, data *TUserYang) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, tUserYangRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.Password, data.Remark)
	return ret, err
}

func (m *defaultTUserYangModel) Update(ctx context.Context, data *TUserYang) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tUserYangRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Username, data.Password, data.Id)
	return err
}

func (m *defaultTUserYangModel) tableName() string {
	return m.table
}
